version: '3.8'

services:
  # üåê API principale
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: universe-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - MASTER_API_KEY=${MASTER_API_KEY:-test-key}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ALLOWED_ORIGINS=*
    env_file:
      - .env
    volumes:
      # Pour le d√©veloppement - mount du code source
      - ./app:/app/app:ro
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # üóÑÔ∏è Redis pour le cache et les sessions
  redis:
    image: redis:7-alpine
    container_name: universe-redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # üìä Monitoring avec Prometheus (optionnel)
  prometheus:
    image: prom/prometheus:latest
    container_name: universe-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles: ["monitoring"]

  # üìà Grafana pour la visualisation (optionnel)
  grafana:
    image: grafana/grafana-oss:latest
    container_name: universe-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    profiles: ["monitoring"]

  # üîç Jaeger pour le tracing (optionnel)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: universe-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: unless-stopped
    profiles: ["monitoring"]

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: universe-network 